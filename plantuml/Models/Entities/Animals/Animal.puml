@startuml
abstract class Animal {
    # Animal(entityLocator:IEntityLocator<Animal>, worldService:IWorldService, position:Position, healthPoints:int, energy:int, isMale:bool, visionRadius:double, contactRadius:double, basalMetabolicRate:double, environment:EnvironmentType)
    + IsMale : bool <<get>> <<set>>
    + VisionRadius : double <<get>> <<set>>
    + ContactRadius : double <<get>> <<set>>
    + IsAdult : bool <<get>> <<set>>
    + ReproductionCooldown : double <<get>> <<set>>
    + HungerThreshold : double <<get>> <<set>>
    + ReproductionEnergyThreshold : double <<get>> <<set>>
    + ReproductionEnergyCost : double <<get>> <<set>>
    + <<override>> GetEnvironmentMovementModifier() : double
    # <<override>> {abstract} CalculateMovementEnergyCost(deltaX:double, deltaY:double) : int
    + CanReproduce() : bool
    + Reproduce(partner:IReproducible) : void
    # Reproduce(partner:Animal) : void
    # {abstract} GiveBirth() : void
    # IsInContactWith(other:LifeForm) : bool
    # <<override>> UpdateBehavior() : void
    + {abstract} SearchForFood() : void
    + {abstract} SearchForMate() : void
    + <<virtual>> Rest() : void
    # NeedsToEat() : bool
    + NeedsToReproduce() : bool
    # <<override>> OnDeath() : void
    - CreateMeat() : void
    # FindNearestMate() : Animal?
    - GetPotentialMates() : IEnumerable<Animal>
}
class "IEntityLocator`1"<T> {
}
class "List`1"<T> {
}
MoveableEntity <|-- Animal
IReproducible <|-- Animal
Animal --> "_entityLocator<Animal>" "IEntityLocator`1"
Animal --> "_worldService" IWorldService
Animal --> "_behaviors<IBehavior>" "List`1"
Animal --> "WorldService" IWorldService
Animal --> "PreferredEnvironment" EnvironmentType
@enduml
