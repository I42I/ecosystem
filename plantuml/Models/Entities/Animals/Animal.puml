@startuml
abstract class Animal {
    # Animal(entityLocator:IEntityLocator<Animal>, worldService:IWorldService, timeManager:ITimeManager, position:Position, healthPoints:int, energy:int, isMale:bool, visionRadius:double, contactRadius:double, basalMetabolicRate:double, environment:EnvironmentType)
    + IsMale : bool <<get>> <<set>>
    + VisionRadius : double <<get>> <<set>>
    + ContactRadius : double <<get>> <<set>>
    + IsAdult : bool <<get>> <<set>>
    + ReproductionCooldown : double <<get>> <<set>>
    + HungerThreshold : double <<get>> <<set>>
    + ReproductionEnergyThreshold : double <<get>> <<set>>
    + ReproductionEnergyCost : double <<get>> <<set>>
    + IsPregnant : bool <<get>> <<set>>
    + AddBehavior(behavior:IBehavior<Animal>) : void
    - AddBaseBehaviors() : void
    # <<override>> UpdateBehavior() : void
    # <<override>> Die() : void
    - CreateMeat() : void
    + GetBestEnvironmentPreference(currentEnv:EnvironmentType) : EnvironmentPreference
    + {abstract} CreateOffspring(position:Position) : Animal
    # <<override>> GetCurrentBehavior() : IBehavior<LifeForm>?
}
class "IEntityLocator`1"<T> {
}
class "List`1"<T> {
}
class "IReadOnlyList`1"<T> {
}
MoveableEntity <|-- Animal
IEnvironmentSensitive <|-- Animal
Animal --> "_entityLocator<Animal>" "IEntityLocator`1"
Animal --> "_worldService" IWorldService
Animal --> "_behaviors<IBehavior<Animal>>" "List`1"
Animal o-> "_environmentPreferences<EnvironmentPreference>" "List`1"
Animal --> "PreferredEnvironments<EnvironmentPreference>" "IReadOnlyList`1"
Animal --> "PreferredEnvironment" EnvironmentType
Animal --> "WorldService" IWorldService
@enduml
